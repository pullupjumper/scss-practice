$columns: 12;

$susy: (
        'svg-grid-colors': hsl(180, 50%, 80%),
        'columns': susy-repeat($columns),
        'gutters': 1/3,
        'container-spread': 'narrow'
);

.container {
  //background: susy-svg-grid() no-repeat scroll;
  max-width: 940px;
  margin-left: auto;
  margin-right: auto;
}

//.row {
//  display: flex;
//  flex-wrap: wrap;
//}

// ex:.row-2nth-child-mr-0
@for $i from 1 through $columns {
  .row-#{$i}nth-child-mr-0 {
    > [class*="col-"]:nth-child(#{$i}n) {
      margin-right: 0;
    }
  }
}

@media (min-width: map_get($grid-breakpoints, xs)) {
  .row-child-mb-no-gutter {
    > [class*="col-"] {
      margin-bottom: 0;
    }
  }
}

@media (min-width: map_get($grid-breakpoints, lg)) {
  .row-child-lg-mb-gutter {
    > [class*="col-"] {
      margin-bottom: gutter();
    }
  }
}

@mixin make-col($columns, $infix) {
  @for $i from 1 through $columns {

    .order#{$infix}-#{$i} {
      order: $i;
    }

    .row {
      display: flex;
      flex-wrap: wrap;

      > .col#{$infix}-#{$i} {
        flex: 0 0 span($i);
        max-width: span($i);

        @if ($i != $columns) {
          margin-right: gutter();
        }

        &:last-child {
          margin-right: 0;
        }
      }
    }

    .row-no-gutter {
      display: flex;
      flex-wrap: wrap;

      > .col#{$infix}-#{$i} {
        @if ($i != $columns) {
          flex: 0 0 span($i wide);
          max-width: span($i wide);
        } @else {
          flex: 0 0 span($i);
          max-width: span($i);
        }

        &:last-child {
          flex: 0 0 span($i);
          max-width: span($i);
        }
      }
    }

  }
}

// ex:.col-md-6
@each $name, $value in $grid-breakpoints {

  @include media-breakpoint-up($name, $grid-breakpoints) {
    $infix: "-#{$name}";

    @if ($value == 0) {
      $infix: "";
    }

    @include make-col($columns, $infix);
  }
}